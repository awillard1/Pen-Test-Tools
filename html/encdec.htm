<html>
<head>
<meta charset="utf-8"/>
    <title>Tools for Input Validation</title>
    <script src="jquery-1.8.3.min.js"></script>
    <script src="jquery-ui-1.9.2.custom/development-bundle/ui/jquery.ui.core.js"></script>

    <script type="text/javascript" language="javascript">
  	<!--

  	    function print_error(error_msg) {
	        var log = '<span style="color:red;">' + error_msg + '</span><br/>';
	        $('#loginError').empty();
	        $('#loginError').append(log);
	        $('#loginError').show();
	}

        function getParameter(paramId) {
        alert(paramId);
            paramId = paramId.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + paramId + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);
            if (results == null) {
                return "";
            }
            else {
                return results[1];
            }
        }
		
		function CopyToClipboard(src) 
		{ 
			var t = document.createElement("textarea");
			t.style.display = "hidden";
			t.value = document.getElementById(src).value;
			t.id = 'cpy';
			document.body.appendChild(t);
			var range = document.createRange();
			range.selectNode(t);
			t.select();
			window.getSelection().addRange(range);
			try {
				var success = document.execCommand('copy');
			} 
			catch (err) {
				 alert('unable to copy');
			}
			document.body.removeChild(t);
			return success;
		}

        function showPassword() {
        document.body.innerHTML=
            document.getElementById("clearTextPassword").innerText = document.getElementById("password").value;
        }
        function setLocationForCookie() {
            document.cookie = "myCookie=Cookie Monster";
            document.location = "javascript:alert(document.cookie)";
        }

        var keyStr = "ABCDEFGHIJKLMNOP" +
               "QRSTUVWXYZabcdef" +
               "ghijklmnopqrstuv" +
               "wxyz0123456789+/" +
               "=";

        function encode64(input) {
            return btoa(input);
        }

        function decode64(input) {
            return atob(input);
        }

        function unescapeString(str) {
            try {
                var div = document.createElement('div');
                div.innerHTML = str;
                return div.firstChild.data;
            }
            catch (ex) {
                return "";
            }
        }

        function escapeHTMLEncode(str) {
            var div = document.createElement('div');
            var text = document.createTextNode(str);
            div.appendChild(text);
            return div.innerHTML;
        }

        function executeHtmlDecode() {
            document.base64Form.ModifiedText.value = unescapeString(document.base64Form.UserInputText.value);
        }

        function executeHtmlEncode() {
            document.base64Form.ModifiedText.value = escapeHTMLEncode(document.base64Form.UserInputText.value);
        }

        function executeEncodeUriComponent() {
            document.base64Form.ModifiedText.value = encodeURIComponent(document.base64Form.UserInputText.value);
        }

        function executeUrlUnescape() {
            document.base64Form.ModifiedText.value = unescape(document.base64Form.UserInputText.value);
        }

        function executeUrlEscape() {
            document.base64Form.ModifiedText.value = escape(document.base64Form.UserInputText.value);
        }

        function executeDecodeBase64() {
            document.base64Form.ModifiedText.value = decode64(document.base64Form.UserInputText.value);
        }

        function executeEncodeBase64() {
            document.base64Form.ModifiedText.value = encode64(document.base64Form.UserInputText.value);
        }

        function executeCopyResult() {
            document.base64Form.UserInputText.value = document.base64Form.ModifiedText.value;
        }

	function escapeAllText(){
	var os = document.base64Form.UserInputText.value;
	var ns='';
	var t;
	var chr='';
	var cc='';
	var tn='';
	for(i=0;i<256;i++){
		tn=i.toString(16);
		if(tn.length<2)tn="0"+tn;
		cc+=tn;
		chr+=unescape('%'+tn);
	}
	cc=cc.toUpperCase();
	os.replace(String.fromCharCode(13)+'',"%13");
	for(q=0;q<os.length;q++){
		t=os.substr(q,1);
		for(i=0;i<chr.length;i++){
			if(t==chr.substr(i,1)){
				t=t.replace(chr.substr(i,1),"%"+cc.substr(i*2,2));
				i=chr.length;
			}
		}
	ns+=t;
	}
	 document.base64Form.ModifiedText.value = ns;
}
function escapeToHex(){
	var os = document.base64Form.UserInputText.value;
	var ns='';
	var t;
	var chr='';
	var cc='';
	var tn='';
	for(i=0;i<256;i++){
		tn=i.toString(16);
		if(tn.length<2)tn="0"+tn;
		cc+=tn;
		chr+=unescape('%'+tn);
	}
	cc=cc.toUpperCase();
	os.replace(String.fromCharCode(13)+'',"%13");
	for(q=0;q<os.length;q++){
		t=os.substr(q,1);
		for(i=0;i<chr.length;i++){
			if(t==chr.substr(i,1)){
				t=t.replace(chr.substr(i,1),"%"+cc.substr(i*2,2));
				i=chr.length;
			}
		}
	ns+=t;
	}
	 ns = ns.replace(/%/g,"\\x");
	 document.base64Form.ModifiedText.value = ns;
	 
}
function hexToAscii(){
var x = 0;
var raw = document.base64Form.UserInputText.value;
var ns ='';
for (x = 0; x <= (raw.length-1); x++){
var hex1 = raw.substring(x, x+1);
var hex2 = raw.substring(x+1, x+2);
if ((hex1 >= 'a') && (hex1 <= 'f')){ hex1 = hex1.toUpperCase(); }
if ((hex2 >= 'a') && (hex2 <= 'f')){ hex2 = hex2.toUpperCase(); }
if (((hex1 >= 'A' && hex1 <= 'F') || (hex1 >= '0' && hex1 <='9')) &&
((hex2 >= 'A' && hex2 <= 'F') || (hex2 >= '0' && hex2 <='9'))) 
{ var hexbyte = hex1 + hex2;
ascii = '.'; // Quite the brute force method here
switch(hexbyte) {
case '00': ascii = '<NUL>'; break;
case '01': ascii = '<SOH>'; break;
case '02': ascii = '<STX>'; break;
case '03': ascii = '<ETX>'; break;
case '04': ascii = '<EOT>'; break;
case '05': ascii = '<ENQ>'; break;
case '06': ascii = '<ACK>'; break;
case '07': ascii = '<BEL>'; break;
case '08': ascii = '<BS>'; break;
case '09': ascii = '<HT>'; break;
case '0A': ascii = '<LF>'; break;
case '0B': ascii = '<VT>'; break;
case '0C': ascii = '<FF>'; break;
case '0D': ascii = chr(13); break;
case '0E': ascii = '<SO>'; break;
case '0F': ascii = '<SI>'; break;
case '10': ascii = '<DLE>'; break;
case '11': ascii = '<DC1>'; break;
case '12': ascii = '<DC2>'; break;
case '13': ascii = '<DC3>'; break;
case '14': ascii = '<DC4>'; break;
case '15': ascii = '<NAK>'; break;
case '16': ascii = '<SYN>'; break;
case '17': ascii = '<ETB>'; break;
case '18': ascii = '<CAN>'; break;
case '19': ascii = '<EM>' ; break;
case '1A': ascii = '<SUB>'; break;
case '1B': ascii = '<ESC>'; break;
case '1C': ascii = '<FS>'; break;
case '1D': ascii = '<GS>'; break;
case '1E': ascii = '<RS>'; break;
case '1F': ascii = '<US>'; break;
case '20': ascii = ' '; break;
case '21': ascii = '!'; break;
case '22': ascii = '"'; break;
case '23': ascii = '#'; break;
case '24': ascii = '$'; break;
case '25': ascii = '%'; break;
case '26': ascii = '&'; break;
case '27': ascii = "'"; break;
case '28': ascii = '('; break;
case '29': ascii = ')'; break;
case '2A': ascii = '*'; break;
case '2B': ascii = '+'; break;
case '2C': ascii = ','; break;
case '2D': ascii = '-'; break;
case '2E': ascii = '.'; break;
case '2F': ascii = '/'; break;
case '30': ascii = '0'; break;
case '31': ascii = '1'; break;
case '32': ascii = '2'; break;
case '33': ascii = '3'; break;
case '34': ascii = '4'; break;
case '35': ascii = '5'; break;
case '36': ascii = '6'; break;
case '37': ascii = '7'; break;
case '38': ascii = '8'; break;
case '39': ascii = '9'; break;
case '3A': ascii = ':'; break;
case '3B': ascii = ';'; break;
case '3C': ascii = '<'; break;
case '3D': ascii = '='; break;
case '3E': ascii = '>'; break;
case '3F': ascii = '?'; break;
case '40': ascii = '@'; break;
case '41': ascii = 'A'; break;
case '42': ascii = 'B'; break;
case '43': ascii = 'C'; break;
case '44': ascii = 'D'; break;
case '45': ascii = 'E'; break;
case '46': ascii = 'F'; break;
case '47': ascii = 'G'; break;
case '48': ascii = 'H'; break;
case '49': ascii = 'I'; break;
case '4A': ascii = 'J'; break;
case '4B': ascii = 'K'; break;
case '4C': ascii = 'L'; break;
case '4D': ascii = 'M'; break;
case '4E': ascii = 'N'; break;
case '4F': ascii = 'O'; break;
case '50': ascii = 'P'; break;
case '51': ascii = 'Q'; break;
case '52': ascii = 'R'; break;
case '53': ascii = 'S'; break;
case '54': ascii = 'T'; break;
case '55': ascii = 'U'; break;
case '56': ascii = 'V'; break;
case '57': ascii = 'W'; break;
case '58': ascii = 'X'; break;
case '59': ascii = 'Y'; break;
case '5A': ascii = 'Z'; break;
case '5B': ascii = '['; break;
case '5C': ascii = '\\'; break;
case '5D': ascii = ']'; break;
case '5E': ascii = '^'; break;
case '5F': ascii = '_'; break;
case '60': ascii = '`'; break;
case '61': ascii = 'a'; break;
case '62': ascii = 'b'; break;
case '63': ascii = 'c'; break;
case '64': ascii = 'd'; break;
case '65': ascii = 'e'; break;
case '66': ascii = 'f'; break;
case '67': ascii = 'g'; break;
case '68': ascii = 'h'; break;
case '69': ascii = 'i'; break;
case '6A': ascii = 'j'; break;
case '6B': ascii = 'k'; break;
case '6C': ascii = 'l'; break;
case '6D': ascii = 'm'; break;
case '6E': ascii = 'n'; break;
case '6F': ascii = 'o'; break;
case '70': ascii = 'p'; break;
case '71': ascii = 'q'; break;
case '72': ascii = 'r'; break;
case '73': ascii = 's'; break;
case '74': ascii = 't'; break;
case '75': ascii = 'u'; break;
case '76': ascii = 'v'; break;
case '77': ascii = 'w'; break;
case '78': ascii = 'x'; break;
case '79': ascii = 'y'; break;
case '7A': ascii = 'z'; break;
case '7B': ascii = '{'; break;
case '7C': ascii = '|'; break;
case '7D': ascii = '}'; break;
case '7E': ascii = '~'; break;
case '7F': ascii = '<DEL>'; break;
case '80': break;
case '81': break;
case '82': break;
case '83': break;
case '84': break;
case '85': break;
case '86': break;
case '87': break;
case '88': break;
case '89': break;
case '8A': break;
case '8B': break;
case '8C': break;
case '8D': break;
case '8E': break;
case '8F': break;
case '90': break;
case '91': break;
case '92': break;
case '93': break;
case '94': break;
case '95': break;
case '96': break;
case '97': break;
case '98': break;
case '99': break;
case '9A': break;
case '9B': break;
case '9C': break;
case '9D': break;
case '9E': break;
case '9F': break;
case 'A0': break;
case 'A1': break;
case 'A2': break;
case 'A3': break;
case 'A4': break;
case 'A5': break;
case 'A6': break;
case 'A7': break;
case 'A8': break;
case 'A9': break;
case 'AA': break;
case 'AB': break;
case 'AC': break;
case 'AD': break;
case 'AE': break;
case 'AF': break;
case 'B0': break;
case 'B1': break;
case 'B2': break;
case 'B3': break;
case 'B4': break;
case 'B5': break;
case 'B6': break;
case 'B7': break;
case 'B8': break;
case 'B9': break;
case 'BA': break;
case 'BB': break;
case 'BC': break;
case 'BD': break;
case 'BE': break;
case 'BF': break;
case 'C0': break;
case 'C1': break;
case 'C2': break;
case 'C3': break;
case 'C4': break;
case 'C5': break;
case 'C6': break;
case 'C7': break;
case 'C8': break;
case 'C9': break;
case 'CA': break;
case 'CB': break;
case 'CC': break;
case 'CD': break;
case 'CE': break;
case 'CF': break;
case 'D0': break;
case 'D1': break;
case 'D2': break;
case 'D3': break;
case 'D4': break;
case 'D5': break;
case 'D6': break;
case 'D7': break;
case 'D8': break;
case 'D9': break;
case 'DA': break;
case 'DB': break;
case 'DC': break;
case 'DD': break;
case 'DE': break;
case 'DF': break;
case 'E0': break;
case 'E1': break;
case 'E2': break;
case 'E3': break;
case 'E4': break;
case 'E5': break;
case 'E6': break;
case 'E7': break;
case 'E8': break;
case 'E9': break;
case 'EA': break;
case 'EB': break;
case 'EC': break;
case 'ED': break;
case 'EE': break;
case 'EF': break;
case 'F0': break;
case 'F1': break;
case 'F2': break;
case 'F3': break;
case 'F4': break;
case 'F5': break;
case 'F6': break;
case 'F7': break;
case 'F8': break;
case 'F9': break;
case 'FA': break;
case 'FB': break;
case 'FC': break;
case 'FD': break;
case 'FE': break;
case 'FF': break;
default : ascii = '<<UNHANDLED CODE>>'; break;
}
x = x + 1;
ns = ns + ascii;
}
else if (hex1 != ' ') 
{ns = ns + ''; }
} 
document.base64Form.ModifiedText.value = ns;
}
  //--></script>

    <style type="text/css">
        body
        {
            font-family: verdana;
            font-size: 11px;
        }
        .fakeButton
        {
            border: 1px solid black;
            padding: 4px;
            color: black;
            background-color: InfoBackground;
        }
        h4
        {
            font-size:1.05em;
        }
        h3
        {
            border-bottom: 1px solid black;
            color:gray;
        }
        .code
        {
            margin:5;
            border:dashed 1px gray;
            background-color:#F9F9F9;
            padding:20;
        }
        #leftPanel
        {
        	width: 75%;
        	float: left;
			display:block;
			padding-right:5px;
        }
        #rightPanel
        {
        	width:50%
        	height: 100%;
        	position:relative;
        	display: block;
        	overflow: visible;
        	float:left;
        	border-left: solid 1px black;
        	padding-left:5px;
        }
        #otherAttacks
        {
        display:block;
        float:left;
        width:100%;
        }
    </style>
</head>
<body>
  <form name="base64Form">
    <div>
      <div id="leftPanel">
        <h3>Input/Output Testing</h3>
        <p>Use this form to test valid and invalid inputs into the application.</p>
        <h4>Input</h4>
        <textarea name="UserInputText" id="UserInputText" cols="75" rows="7"></textarea>
        <br />
        <p>
          <a class='fakeButton' href="#" onclick="executeEncodeBase64();">Encode to base64</a>&nbsp;
          <a class='fakeButton' href="#" onclick="executeDecodeBase64(); return false;">Decode from base64</a>&nbsp;
          <a class='fakeButton' href="#" onclick="executeUrlEscape();">Url Escape</a>&nbsp;
          <a class='fakeButton' href="#" onclick="executeUrlUnescape();">Url Unescape</a>&nbsp;
          <a class='fakeButton' href="#" onclick="executeEncodeUriComponent();">Encode URI Component</a>
        </p>
        <p>
          <a class='fakeButton' href="#" onclick="executeHtmlEncode();">Html Encode</a>
          <a class='fakeButton' href="#" onclick="executeHtmlDecode();">Html Decode</a>
        </p>
        <p>
          <a class='fakeButton' href="#" onclick="escapeAllText()">Escape All Text</a>
		  <a class='fakeButton' href="#" onclick="escapeToHex()">Convert To \x</a>
		  <a class='fakeButton' href="#" onclick="hexToAscii()">Convert Hex To Ascii</a>
		  <a class='fakeButton' href="#" onclick="CopyToClipboard('UserInputText');">Copy</a>
        </p>
        <h4>Result</h4>
        <textarea name="ModifiedText" id="ModifiedText" cols="75" rows="7"></textarea>
        <br />
        <p>
          <a class='fakeButton' href="#" onclick="executeCopyResult();">Move Result to Input</a>
		  <a class='fakeButton' href="#" onclick="CopyToClipboard('ModifiedText');">Copy</a>
        </p>
      </div>
    </div>
  </form>
</body>
</html>
